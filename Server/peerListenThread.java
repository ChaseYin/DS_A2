package Server;

import Client.ClientMessage;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.JSONValue;

import java.io.*;
import java.net.*;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.concurrent.ConcurrentLinkedQueue;

import static Server.Server.*;
import static java.lang.Integer.parseInt;
//import static jdk.internal.logger.DefaultLoggerFinder.SharedLoggers.system;

public class peerListenThread implements Runnable {

    Socket socket;
    String peerId;//address+监听的端口
    int listenPort;//peer监听的端口
    int iPort;
    String ip;
    String roomId="";
    String idPort;

    private static String identity;
    public static  Boolean connected = false;
    public static  Boolean needToQuit = false;
    public static  Boolean quit = false;



    peerListenThread(String ipAddress, int listenPort, int iPort) {
        this.iPort = iPort;
        this.ip = ipAddress;
        this.listenPort = listenPort;
        this.peerId = ipAddress + ":"+listenPort;


    }

    //这个thread要实现的功能是监听peer的local command（只处理create room， delete room）
    @Override
    public void run() {

        try {
            //get outputStream
           // DataOutputStream outputStream = new DataOutputStream(socket.getOutputStream());
            // read users' input
            //读取用户的输入（命令行的输入）

            Scanner userInput = new Scanner(System.in);

            String message;
            //System.out.println("成功启动本地监听线程");


            String ipAddress = InetAddress.getLocalHost().toString();
            String[] arr = ipAddress.split("/");
//            System.out.println("第一个参数是："+arr[0]);

            //System.out.println("当前的ip是："+arr[1]);
            System.out.println("Current ip is："+arr[1]);
            String ip = arr[1];

            //System.out.println("address1是："+ip);
            // Send new identity message for the first time
//            String newIdReq = new peerMessage().newIdentityRequest("");
//            outputStream.writeUTF(newIdReq);
//            outputStream.flush();

            // Send roomchange request for the first time, to join MainHall
//            String roomChange = new peerMessage().joinRoomRequest("MainHall");
//            outputStream.writeUTF(roomChange);
//            outputStream.flush();

            // Display the contents of the entire chat
//            String listMsg = new peerMessage().listRequest();
//            outputStream.writeUTF(listMsg);
//            outputStream.flush();

            // Display contents for MainHall for first-time joiners
//            String whoMsg = new peerMessage().whoRequest("MainHall");
//            outputStream.writeUTF(whoMsg);
//            outputStream.flush();

            // After setting up identity and room, monitor new messages from clients keyboard.
            while (!quit) {
//                System.out.println("Please note that if you want to assign specific port of connection socket to the other" +
//                        "peer, try #connect hostAddress hostPort -connectionPort connectionPort to assign your own connectionPort\n");
//                System.out.println("Otherwise your connection port(also refer to your id) will be automatically generated by system");


                System.out.print(">");message = userInput.nextLine();

                // user inputs commands
                if (message.charAt(0) == '#') {
                    String[] messageTokens = message.split(" ");
                    //get the command
                    String command = messageTokens[0];


                    switch (command) {
                        case "#migrate":
                            try {
                                String migrateRoom = messageTokens[1];
                                String migrateIp = messageTokens[2];
                                String migratePort = messageTokens[3];
                                //System.out.println("结果是："+Server.getRoomMem(messageTokens[1]));
                                //String response = in.readUTF();

                                //utilize json object
                                Object obj = JSONValue.parse(Server.getRoomMem(migrateRoom));
                                JSONObject jsonMsg = (JSONObject) obj;
                                //String type = (String) jsonMsg.get("type");

                                processMigrate(jsonMsg, migrateIp, migratePort);
                                //Server.addKickUsers(userToKick);
                            } catch (Exception e) {
                                System.out.println("Please refer tp this order temp: #migrate room1 127.0.0.1 6666");
                            }
                            break;


                        case "#listneighbors":

                            String listNeighborsRequestMsg = new peerMessage().listNeighborsRequest();
                            localNeighborRequest();
//                            outputStream.writeUTF(listNeighborsRequestMsg);
//                            outputStream.flush();
                            break;

                        case "#who":
                            try {
                                String room = messageTokens[1];
                                if (room != null) {
                                    localWhoRequest(room);
                                }
                            } catch (Exception e) {
                                System.out.println("Please provide the name of the room you wish to inspect");
                            }
                            break;

                        //后续可能需要这个命令列出当前peer已经create的room列表
                        case "#list":

                            String listRequestMsg = new peerMessage().listRequest();
                            ArrayList<JSONObject> roomsCount = Server.getRoomListWithCount();
                            //System.out.println("当前peer下的所有room为："+roomsCount);

                            System.out.println("room of this peer is ："+roomsCount);

                            //System.out.println("执行本地#list命令");
//                            outputStream.writeUTF(listRequestMsg);
//                            outputStream.flush();
                            break;

                        case "#help":

                            helpReplay();
//                            outputStream.writeUTF(listRequestMsg);
//                            outputStream.flush();
                            break;


                        case "#kick":
                            try {
                                String userToKick = messageTokens[1];
                                Server.addKickUsers(userToKick);
                            } catch (Exception e) {
                                System.out.println("Please provide the the user you wish to kick followed by #kick");
                            }
                            break;

                        case "#searchnetwork":
                            //users里存连接当前peer的peer
                            try {
                                //应该在最后加一个addNeighbor重新给networkList中加入已连接当前peer下的用户
                                String[] users = networkList.toArray(new String[networkList.size()]);


//                                System.out.println("当前连接本peer的用户有：");
//                                for (int i = 0; i < users.length; i++) {
//                                    System.out.println(" " + users[i] + " ; ");
//                                }

                                while(!networkList.isEmpty()){
                                    try {
                                        int size = networkList.size();

                                        String element = networkList.poll();
                                        String[] portArr = element.split(":");
                                        //System.out.println("需要连接的ip是"+portArr[0]);
                                        //System.out.println("端口号是"+portArr[1]);

                                        //System.out.println("现在有"+size+"个peer需要去search");
                                        //System.out.println("执行第"+num+"次search");

                                        Socket connSocket = null;
                                        connSocket = new Socket(portArr[0], Integer.parseInt(portArr[1]));

                                        DataInputStream ins = new DataInputStream(connSocket.getInputStream());

                                        Thread searchThread = new Thread(new searchNetworkThread(connSocket));
                                        searchThread.start();
                                        //System.out.println("当前peer为："+element);
                                        System.out.println("Peer ID："+element);
                                        //这里从3改成了2，因为好像并没有case："quit"的时候
                                        for(int n = 0; n < 2;n++){
                                            String response = ins.readUTF();

                                            //utilize json object
                                            Object obj = JSONValue.parse(response);
                                            JSONObject jsonMsg = (JSONObject) obj;
                                            String type = (String) jsonMsg.get("type");

                                            switch (type) {
                                                case "neighborlist":
                                                    //neighborContentsReply(jsonMsg);
                                                    storeNeighbor(jsonMsg);
                                                    break;

                                                //说明当前连接的peer都有哪些room
                                                case "roomlist":
                                                    roomListReply(jsonMsg);
                                                    break;

//                                                case "quit":
//                                                    roomListReply(jsonMsg);
//                                                    break;

                                                default:
                                                    //System.out.println("default情况触发");
                                                    System.out.println("");
                                                    break;
                                            }
                                        }
                                    }catch(EOFException e){
                                        //System.out.println("当前线程quit完毕");
                                        System.out.println("");
                                    }
                                }
                                //在把networkList清空之后，需要恢复初始状态，也就是包含当前连接的本peer的所有peer
//                                for(int s = 0; s < neighborList.size(); s++)
//                                {
//                                    networkList.add(neighborList.getIndexOf(s));
//                                }
                                //System.out.println("networkList的size是："+networkList.size());
                                //System.out.println("neighborList的size是："+neighborList.size());
                                //ConcurrentLinkedQueue<String> newList = new ConcurrentLinkedQueue<String>();
                                //newList = neighborList;
                                //networkList = newList;
                                networkList.addAll(neighborList);

                            }catch(EOFException e){
                                    //System.out.println("DataInputStream关闭");
                                System.out.println("");
                            }

                                break;


                        case "#join":
                            try {
                                String roomId = messageTokens[1];
                                if (roomId != null && isValidRoomName(roomId)) {
//                                    String joinRoomMsg = new peerMessage().joinRoomRequest(roomId);
//                                    outputStream.writeUTF(joinRoomMsg);
//                                    outputStream.flush();
                                    Server.localJoinRoom(roomId);
                                } else {
                                    System.out.println("Invalid room name.");
                                }
                            } catch (Exception e) {
                                e.printStackTrace();
                                System.out.println("Please provide the name of the room you would like to join.");
                            }
                            break;

                        case "#connect":
                            try {
                                if(messageTokens.length==3)
                                {
                                    String connectAddress = messageTokens[1];
                                    //要连接的server的监听端口
                                    String connectPort = messageTokens[2];

                                    Socket connectSocket = null;
                                    connectSocket = new Socket(connectAddress, parseInt(connectPort));
                                    DataInputStream in = new DataInputStream(connectSocket.getInputStream());

                                    int clientPort=connectSocket.getLocalPort();
                                    //System.out.println("当前的peer的连接端口是："+clientPort);


                                    if(iPort!=0)
                                    {
                                        //System.out.println("用户已经指定该peer的连接端口为"+iPort);
                                        System.out.println("User has pointed the connection port of the peer as:"+iPort);
                                        Thread sendingThread = new Thread(new peerSendThread(connectSocket,ip,iPort,listenPort));
                                        sendingThread.start();
                                        idPort = iPort+"";
                                        Server.peerConId = iPort+"";

                                    }else{

                                        //System.out.println("用户没有指定特别的连接端口，连接端口自动生成");
                                        System.out.println("User does not pointed specific connection port, so generated it automatically");
                                        Thread sendingThread = new Thread(new peerSendThread(connectSocket,ip,clientPort,listenPort));
                                        sendingThread.start();
                                        idPort = clientPort+"";
                                        Server.peerConId = idPort;
                                    }

                                    Server.connectedTo = connectAddress+":"+connectPort;

                                    //connected = true;



                                    try {
                                        //在这里读连接到的peer（server）返回的response
                                        while (!quit) {
                                            System.out.print("[" + roomId + "]" + ip + ": " + idPort + ">");
                                            //System.out.print(ipAddress+": "+conPort+">");
                                            String response = in.readUTF();

                                            //utilize json object
                                            Object obj = JSONValue.parse(response);
                                            JSONObject jsonMsg = (JSONObject) obj;
                                            String type = (String) jsonMsg.get("type");

                                            switch (type) {

                                                case "message":
                                                    //System.out.println("收到messagereplay的reponse");
                                                    messageReply(jsonMsg);
                                                    break;

                                                case "shout":
                                                    //System.out.println("收到shout信息！！");
                                                    shoutReplay(jsonMsg);
                                                    Server.shout(jsonMsg.toString());
                                                    break;

                                                case "kickInfo":
                                                    //System.out.println("收到shout信息！！");
                                                    kickReplay(jsonMsg);
                                                    break;


                                                case "neighborlist":
                                                    neighborContentsReply(jsonMsg);
                                                    break;


                                                case "roomchange":
                                                    //disconnect from chat room

//                                                    System.out.println("formerRoom是："+jsonMsg.get("former").toString());
//                                                    System.out.println("newRoom是："+jsonMsg.get("roomid").toString());
//                                                    System.out.println("id是："+jsonMsg.get("identity").toString());

                                                    if (jsonMsg.get("roomid").toString().equals("quit"))
                                                    {
                                                        //Server.neighborList.remove();
                                                        roomId="";
                                                        //System.out.println("要退出的id是："+peerId);
                                                        //userThreads.remove();
                                                            System.out.println("Disconnected from " + connectSocket.getInetAddress()+":"+connectPort);
                                                            in.close();
                                                            connectSocket.close();
                                                            //sendingThread.join();
                                                            connected = false;
                                                        //needToQuit = true;
                                                        //userInput.close();
                                                            //中断与remote peer通信的连接线程
                                                        //System.exit(1);
                                                        throw new InterruptedException();


                                                    }
                                                    // normal room change
                                                    else {
                                                        if(jsonMsg.get("roomid").toString().equals(""))
                                                        {
                                                            //System.out.println("第一次连接成功建立");
                                                            System.out.println("");
                                                        }else{
                                                            String id = ip+":"+idPort;
                                                            if(jsonMsg.get("identity").toString().equals(id)){
                                                               // System.out.println("比对成功");
                                                                roomId = jsonMsg.get("roomid").toString();
                                                            }

                                                            String ident = jsonMsg.get("identity").toString();
                                                            //向当前room公告x移动到了room X
                                                            System.out.println(ident + " moves to " + jsonMsg.get("roomid").toString());
                                                        }


                                                    }
                                                    break;
                                                //说明当前room都有些谁
                                                case "roomcontents":
                                                    roomContentsReply(jsonMsg);
                                                    break;

                                                //说明当前连接的peer都有哪些room
                                                case "roomlist":
                                                    roomListReply(jsonMsg);
                                                    break;

                                                case "roomchangecheck":
                                                    roomCheckReply(jsonMsg);
                                                    break;


                                                default:
                                                    System.out.println("The peer you connected cannot process your command");
                                                    break;
                                            }
                                        }


                                        //System.out.println("跳出循环！！！！");

                                    }catch (EOFException | InterruptedException | SocketException e){
                                        //System.out.println("捕获EOF");
                                        System.out.println("");

                                    }


                                    //sendingThread.join();
                                }
                                else{
                                    System.out.println("the connect order is not right,please use #connect remotepeer portnumber to connect");
                                }




                            } catch (EOFException e) {
                                //当输入#quit的时候会触发一个EOFException，因为in被关闭了但是马上又被while（true）拿去监听
                                //不过正常功能好像并不影响
                                System.out.println("Errors happened when try to connect the remote peer");
                                e.printStackTrace();
                            }


                            break;






                        //目前主要修改这个命令

                        case "#createroom":
                            try {
                                String newRoom = messageTokens[1];

                                if(connected)
                                {
                                    System.out.println("When you connected to other peer, local command cannot be processed");
                                }
                                else{
                                    //System.out.println("当前还没有连接到别的peer");
                                    if ((newRoom != null)
                                        && isValidRoomName(newRoom)) {
                                    Server.createLocalRoom(newRoom, peerId);
                                    //String createRequestMsg = new peerMessage().createRomRequest(newRoom);
//                                    createRoom(createRequestMsg);
                                } else {
                                    System.out.println("Rooms must contain number and letter with at least 3 " + "characters and no more than 16 characters");
                                }

                                }


                            } catch (Exception e) {
                                System.out.println("Please input a room name");
                            }
                            break;

                        case "#delete":
                            try {

                                //String deleteRequestMsg = new peerMessage().deleteRequest(messageTokens[1]);
                                Server.deleteRoom(messageTokens[1]);

//                                outputStream.writeUTF(deleteRequestMsg);
//                                outputStream.flush();

                            } catch (Exception e) {
                                System.out.println("Please input the name of the room you wish to delete");
                            }
                            break;

                        default:
                            System.out.println("You may have typed a command incorrectly");
                            break;
                    }
                }
                //  send normal message
                //发送普通的聊天信息
                else {
                        System.out.println("Currently you do not connect to any peers yet, plase try '#connect' command ");
//                    String jsonChatMessage = new peerMessage().chatMessage(message);
//                    outputStream.writeUTF(jsonChatMessage);
//                    outputStream.flush();

                }
            }
        } catch (Exception e) {
            //System.out.println("最外层报错！！！！");
            System.out.println("");
            //e.printStackTrace();
        }
    }

    private boolean isValidName(String input) {
        //check the name if meet the requirements
        if ((input.length() >= 3 && input.length() <= 16) && (input.matches("[A-Za-z0-9]+")) &&
                (!Character.isDigit(input.charAt(0))))
        {
            return true;

        } else {

            return false;

        }
    }

    private boolean isValidRoomName(String input) {
        //check the name if meet the requirements
        if ((input.length() >= 3 && input.length() <= 32) && (input.matches("[A-Za-z0-9]+"))
                && (!Character.isDigit(input.charAt(0)))
        ) {
            return true;
        } else {
            return false;
        }
    }



    //原来client类里的方法
    private static void messageReply(JSONObject jsonMsg) {
        //display clients' chat content

        System.out.print(jsonMsg.get("identity").toString() + " -> " + jsonMsg.get("content").toString());
        System.out.println();

    }

    private static void shoutReplay(JSONObject jsonMsg) {
        //display clients' chat content

        System.out.print(jsonMsg.get("id").toString() + " shouted: " + jsonMsg.get("content").toString());
        System.out.println();

    }

    private static void kickReplay(JSONObject jsonMsg) {
        //display clients' chat content

        System.out.print("Sorry, you have been blocked to connect this peer");
        System.out.println();

    }

    private static void helpReplay() {
        //display clients' chat content
        System.out.println("Following is the examples of local commands :");
        System.out.println("#connect remotePeerIp remoteListenPort to connect to other peer");
        System.out.println("#createroom roomName");
        System.out.println("#delete roomName");
        System.out.println("#searchnetwork");
        System.out.println("#kick peerId");
        System.out.println("#join roomName");
        System.out.println("#list");
        System.out.println();

    }

    private static void roomCheckReply(JSONObject jsonMsg) {
        //display clients' chat content

        System.out.print("The room called "+jsonMsg.get("roomId").toString() + " is "+ jsonMsg.get("result").toString());
        System.out.println();

    }

    private static void roomContentsReply(JSONObject jsonMsg) {

        String currentRoom = jsonMsg.get("roomid").toString();
        //get all identities of the room
        JSONArray jsonRoomMembers = (JSONArray) jsonMsg.get("identities");

        ArrayList<String> roomMembers = new ArrayList<>();

        for (int i = 0; i < jsonRoomMembers.size(); i++) {
            //use msg from server to add user into rooms
            roomMembers.add(jsonRoomMembers.get(i).toString());

        }

        if (currentRoom.equals("MainHall")) {
            System.out.print(currentRoom + " contains ");

            for (String member : roomMembers) {
                System.out.print(member + " ");
            }
            System.out.println();
        }
        else {

            System.out.print(currentRoom + " contains ");
            for (String member : roomMembers) {
                System.out.print(member + "; ");
            }
            System.out.println();
            System.out.print("The owner is: " + jsonMsg.get("owner").toString());
            System.out.println();
        }

    }

    private void processMigrate(JSONObject jsonMsg, String futureIp, String futurePort) {

        String currentRoom = jsonMsg.get("roomid").toString();
        //get all identities of the room
        JSONArray jsonRoomMembers = (JSONArray) jsonMsg.get("identities");

        ArrayList<String> roomMembers = new ArrayList<>();

        for (int i = 0; i < jsonRoomMembers.size(); i++) {
            //use msg from server to add user into rooms
            roomMembers.add(jsonRoomMembers.get(i).toString());

        }

            System.out.print("The migrating room "+currentRoom + " contains ");
            for (String member : roomMembers) {
                System.out.print(member + " ;");
                //String[] arr = member.split(":");
                Server.migrate(member,futureIp,futurePort,currentRoom);

            }



    }


    private static void neighborContentsReply(JSONObject jsonMsg) {

//        String currentRoom = jsonMsg.get("roomid").toString();
        //get all identities of the room
        JSONArray jsonRoomMembers = (JSONArray) jsonMsg.get("neighbors");

        ArrayList<String> roomMembers = new ArrayList<>();

        for (int i = 0; i < jsonRoomMembers.size(); i++) {
            //use msg from server to add user into rooms
            roomMembers.add(jsonRoomMembers.get(i).toString());

        }


            System.out.print("neighbor contains ");

            for (String member : roomMembers) {
                System.out.print(member + "; ");
            }
            System.out.println();



    }

    private static void storeNeighbor(JSONObject jsonMsg) {

//        String currentRoom = jsonMsg.get("roomid").toString();
        //get all identities of the room
        JSONArray jsonRoomMembers = (JSONArray) jsonMsg.get("neighbors");

        ArrayList<String> roomMembers = new ArrayList<>();

        for (int i = 0; i < jsonRoomMembers.size(); i++) {
            //use msg from server to add user into rooms
            roomMembers.add(jsonRoomMembers.get(i).toString());

            networkList.add(jsonRoomMembers.get(i).toString());
        }

    }


    private static void roomListReply(JSONObject jsonMsg) {
        JSONArray roomList = (JSONArray) jsonMsg.get("rooms");
        if(roomList.size()==0)
        {
            System.out.println("This peer does not create any rooms yet");
        }else{
            for (int i = 0; i < roomList.size(); i++) {
                //print the room id and count of each room
                JSONObject singleRoom = (JSONObject) roomList.get(i);
                System.out.print(singleRoom.get("roomid").toString() + ": ");
                System.out.print(singleRoom.get("count").toString() + " guest/s");
                System.out.println();

            }
            System.out.println();
        }

    }

    private static void localNeighborRequest() {
        System.out.println("current all peers include:");
        for(int i = 0; i < userIdentities.size(); i++)
        {
            System.out.println(userIdentities.get(i)+"; ");
        }



    }
    private void localWhoRequest(String roomId) throws IOException {
            ChatRoom roomWho = Server.getRoom(roomId);
            if (roomWho != null) {
                String roomOwner = roomWho.getOwner();
                String[] usersInside = roomWho.getUsers().toArray(new String[Server.getRoom(roomId).getUsers().size()]);

                //String whoResponse = new ServerMessage().roomContentsMsg(roomId, roomOwner, usersInside);

                System.out.print(roomId + " contains ");
                for (String member : usersInside) {
                    System.out.print(member + "; ");
                }
                System.out.println();
                System.out.print("The owner is: " + roomOwner);
                System.out.println();
            }

    }





}
